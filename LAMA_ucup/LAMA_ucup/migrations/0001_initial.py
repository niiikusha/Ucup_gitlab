# Generated by Django 4.2.7 on 2024-03-11 04:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthtokenToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'authtoken_token',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BrandClassifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_code', models.CharField(verbose_name='Внешний код')),
                ('brand_name', models.CharField(verbose_name='Название Бренда')),
                ('producer_name', models.CharField(verbose_name='Имя производителя')),
            ],
            options={
                'db_table': 'brand_classifier',
            },
        ),
        migrations.CreateModel(
            name='Classifier',
            fields=[
                ('id', models.CharField(primary_key=True, serialize=False, verbose_name='id')),
                ('l1', models.CharField(verbose_name='Код первого уровня')),
                ('l1_name', models.CharField(verbose_name='Название первого уровня')),
                ('l2', models.CharField(verbose_name='Код второго уровня')),
                ('l2_name', models.CharField(verbose_name='Название первого уровня')),
                ('l3', models.CharField(verbose_name='Код третьего уровня')),
                ('l3_name', models.CharField(verbose_name='Название третьего уровня')),
                ('l4', models.CharField(verbose_name='Код четвертого уровня')),
                ('l4_name', models.CharField(verbose_name='Название четвертого уровня')),
            ],
            options={
                'db_table': 'classifier',
            },
        ),
        migrations.CreateModel(
            name='ClassifierTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classifier_code', models.CharField(max_length=12, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('parent_code', models.CharField(max_length=12)),
            ],
            options={
                'db_table': 'app_classifier',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_code', models.CharField(max_length=4, verbose_name='Внешний ключ')),
                ('director_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя директора')),
                ('urastic_name', models.CharField(max_length=100, verbose_name='Полное название')),
                ('name', models.CharField(max_length=100, verbose_name='Название организации')),
                ('urastic_address', models.CharField(blank=True, max_length=250, null=True, verbose_name='Адрес')),
                ('inn_kpp', models.CharField(blank=True, max_length=121, null=True, verbose_name='ИНН\\КПП')),
                ('bank_name', models.CharField(max_length=100, verbose_name='Название банка')),
                ('account', models.CharField(max_length=35, verbose_name='Номер счета')),
                ('corr_account', models.CharField(max_length=35, verbose_name='Кор. Счет')),
                ('bank_bink', models.CharField(max_length=15, verbose_name='BankBink')),
                ('merge_id', models.CharField(blank=True, max_length=4, null=True, verbose_name='MergeID')),
            ],
            options={
                'db_table': 'entity',
            },
        ),
        migrations.CreateModel(
            name='Ku',
            fields=[
                ('ku_id', models.CharField(editable=False, primary_key=True, serialize=False, verbose_name='Ku_id')),
                ('period', models.CharField(max_length=10, verbose_name='Период')),
                ('date_start', models.DateField(verbose_name='Дата начала')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('date_actual', models.DateField(blank=True, null=True, verbose_name='Актуальная дата')),
                ('percent', models.IntegerField(blank=True, null=True, verbose_name='Процент')),
                ('status_ku', models.CharField(choices=[('Create', 'Создано'), ('Valid', 'Действует'), ('Сancel', 'Отменено'), ('Сlose', 'Закрыто')], default='Create', verbose_name='Статус ку')),
                ('graph_exists', models.BooleanField(blank=True, null=True, verbose_name='Существование графика')),
                ('description', models.CharField(blank=True, null=True, verbose_name='Описание')),
                ('contract', models.CharField(blank=True, null=True, verbose_name='Контракт')),
                ('product_type', models.CharField(blank=True, null=True, verbose_name='Тип продукта')),
                ('docu_account', models.CharField(blank=True, null=True, verbose_name='Номер счета в договоре')),
                ('docu_name', models.CharField(blank=True, null=True, verbose_name='Название договора')),
                ('docu_number', models.CharField(blank=True, null=True, verbose_name='Номер договора')),
                ('docu_date', models.DateField(blank=True, null=True, verbose_name='Дата договора')),
                ('docu_subject', models.CharField(blank=True, null=True, verbose_name='Предмет договора')),
                ('tax', models.BooleanField(blank=True, null=True, verbose_name='Налог')),
                ('exclude_return', models.BooleanField(blank=True, null=True, verbose_name='Исключать возвраты')),
                ('negative_turnover', models.BooleanField(blank=True, null=True, verbose_name='Отрицательный товарооборот')),
                ('ku_type', models.CharField(choices=[('RetroBonus', 'Ретро-бонус'), ('Service', 'Услуга')], default='RetroBonus', verbose_name='Тип КУ')),
                ('pay_method', models.CharField(choices=[('Mutual', 'Взаиморасчет'), ('Payment', 'Оплата')], default='Mutual', verbose_name='Способ оплаты')),
                ('entity_key', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.entity', verbose_name='Юр. лицо')),
            ],
            options={
                'db_table': 'ku',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_code', models.CharField(verbose_name='Внешний код продукта')),
                ('name', models.CharField(blank=True, null=True, verbose_name='Название продукта')),
                ('brand_key', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.brandclassifier', verbose_name='Бренд')),
                ('classifier_key', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.classifier', verbose_name='Категория')),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='VendDoc',
            fields=[
                ('doc_id', models.CharField(primary_key=True, serialize=False, verbose_name='Doc_id')),
                ('doc_type', models.CharField(verbose_name='DocType')),
                ('invoice_name', models.CharField(verbose_name='Invoice_name')),
                ('invoice_number', models.CharField(verbose_name='Invoice_number')),
                ('invoice_date', models.DateField(verbose_name='Invoice_date')),
                ('purch_number', models.CharField(verbose_name='Purch_number')),
                ('purch_date', models.DateField(verbose_name='Purch_date')),
                ('invoice_status', models.CharField(blank=True, null=True, verbose_name='InvoiceStatus')),
                ('invoice_id', models.BigIntegerField(null=True, verbose_name='Invoice_id')),
                ('products_amount', models.FloatField(blank=True, null=True, verbose_name='Products_amount')),
                ('entity_key', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.entity', verbose_name='Юр лицо')),
            ],
            options={
                'db_table': 'vend_doc',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_code', models.CharField(max_length=20, verbose_name='Внешний код поставщика')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя поставщика')),
                ('urastic_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Полное имя')),
                ('inn_kpp', models.CharField(blank=True, max_length=121, null=True, verbose_name='INN/KPP')),
                ('director_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя директора')),
                ('urastic_adress', models.CharField(blank=True, max_length=250, null=True, verbose_name='Адрес')),
                ('account', models.CharField(blank=True, max_length=35, null=True, verbose_name='Счет')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название банка')),
                ('bank_bik', models.CharField(blank=True, max_length=15, null=True, verbose_name='БИК банка')),
                ('corr_account', models.CharField(blank=True, max_length=35, null=True, verbose_name='Номер счета')),
                ('dir_party', models.BigIntegerField(blank=True, null=True, verbose_name='DirParty')),
                ('entity_key', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.entity', verbose_name='Номер юр. лица')),
            ],
            options={
                'db_table': 'vendor',
            },
        ),
        migrations.CreateModel(
            name='VendDocLine',
            fields=[
                ('rec_id', models.BigIntegerField(db_column='RecId', primary_key=True, serialize=False)),
                ('qty', models.FloatField(verbose_name='QTY')),
                ('amount', models.FloatField(verbose_name='Amount')),
                ('amount_vat', models.FloatField(verbose_name='AmountVAT')),
                ('vat', models.FloatField(verbose_name='VAT')),
                ('invoice_id', models.BigIntegerField(blank=True, null=True, verbose_name='Invoice_id')),
                ('doc_key', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.venddoc', verbose_name='Накладная')),
                ('product_key', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.product', verbose_name='Продукт')),
            ],
            options={
                'db_table': 'vend_doc_line',
            },
        ),
        migrations.AddField(
            model_name='venddoc',
            name='vendor_key',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.vendor', verbose_name='Поставщик'),
        ),
        migrations.CreateModel(
            name='KuGraph',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(max_length=10, verbose_name='Период')),
                ('date_start', models.DateField(verbose_name='Дата начала')),
                ('date_end', models.DateField(verbose_name='Дата окончания')),
                ('date_calc', models.DateField(verbose_name='Дата расчета')),
                ('status_graph', models.CharField(choices=[('Planned', 'Запланировано'), ('Calculated', 'Рассчитано'), ('Approved', 'Утверждено')], default='Planned', verbose_name='Статус графика')),
                ('sum_calc', models.FloatField(blank=True, null=True, verbose_name='Рассчитанная сумма')),
                ('sum_bonus', models.FloatField(blank=True, null=True, verbose_name='Сумма бонуса')),
                ('percent', models.IntegerField(blank=True, null=True, verbose_name='Процент')),
                ('sum_approved', models.FloatField(blank=True, null=True, verbose_name='Утвержденная сумма')),
                ('ku_key', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.ku', verbose_name='Коммерческое условие')),
                ('vendor_key', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.vendor', verbose_name='Поставщик')),
            ],
            options={
                'db_table': 'graph_ku',
            },
        ),
        migrations.AddField(
            model_name='ku',
            name='vendor_key',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.vendor', verbose_name='Поставщик'),
        ),
        migrations.CreateModel(
            name='IncludedProductList',
            fields=[
                ('inc_prod_list', models.BigAutoField(db_column='Inc_prod_list', primary_key=True, serialize=False)),
                ('amount', models.FloatField(blank=True, null=True, verbose_name='Сумма')),
                ('invoice_id', models.CharField(blank=True, null=True, verbose_name='Номер накладной')),
                ('graph_key', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.kugraph', verbose_name='Номер графика')),
                ('product_key', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.product', verbose_name='Код продукта')),
                ('rec_key', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.venddocline', verbose_name='Номер накладной')),
            ],
            options={
                'db_table': 'included_product_list',
            },
        ),
        migrations.CreateModel(
            name='IncludedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(blank=True, db_column='Item_type', null=True)),
                ('item_code', models.CharField(blank=True, db_column='Item_code', null=True)),
                ('item_name', models.CharField(blank=True, db_column='Item_name', null=True)),
                ('brand', models.CharField(blank=True, db_column='Brand', null=True)),
                ('producer', models.CharField(blank=True, db_column='Producer', null=True)),
                ('ku_key', models.ForeignKey(blank=True, db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='LAMA_ucup.ku', verbose_name='КУ')),
            ],
            options={
                'db_table': 'included_product',
            },
        ),
    ]

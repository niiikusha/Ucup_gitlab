# Generated by Django 4.2.7 on 2024-03-21 06:21

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthtokenToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'authtoken_token',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('name', models.CharField(blank=True, null=True)),
                ('id', models.CharField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'article',
            },
        ),
        migrations.CreateModel(
            name='Assortment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_id', models.CharField(blank=True, db_column='Product_Id', null=True)),
                ('vendor_id', models.CharField(blank=True, db_column='Vendor_Id', null=True)),
                ('entity_id', models.CharField(blank=True, db_column='Entity_Id', null=True)),
            ],
            options={
                'db_table': 'assortment',
            },
        ),
        migrations.CreateModel(
            name='BonusCondition',
            fields=[
                ('fix', models.BooleanField(blank=True, null=True)),
                ('criterion', models.FloatField(blank=True, null=True)),
                ('percent_sum', models.FloatField(blank=True, null=True)),
                ('ku_key_id', models.CharField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'bonus_condition',
            },
        ),
        migrations.CreateModel(
            name='Brandclassifier',
            fields=[
                ('classifierid', models.CharField(db_column='ClassifierID', primary_key=True, serialize=False)),
                ('brand_name', models.CharField(db_column='Brand_name')),
                ('producer_name', models.CharField(db_column='Producer_name')),
            ],
            options={
                'db_table': 'brand_classifier',
            },
        ),
        migrations.CreateModel(
            name='Classifier',
            fields=[
                ('classifierid', models.CharField(primary_key=True, serialize=False, verbose_name='ClassifierID')),
                ('l1', models.CharField(db_column='L1')),
                ('l1_name', models.CharField(db_column='L1_name')),
                ('l2', models.CharField(db_column='L2')),
                ('l2_name', models.CharField(db_column='L2_name')),
                ('l3', models.CharField(db_column='L3')),
                ('l3_name', models.CharField(db_column='L3_name')),
                ('l4', models.CharField(db_column='L4')),
                ('l4_name', models.CharField(db_column='L4_name')),
            ],
            options={
                'db_table': 'classifier',
            },
        ),
        migrations.CreateModel(
            name='ClassifierTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classifier_code', models.CharField(max_length=12, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('parent_code', models.CharField(max_length=12)),
            ],
            options={
                'db_table': 'app_classifier',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('entity_id', models.CharField(max_length=4, primary_key=True, serialize=False, verbose_name='entity_id')),
                ('director_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='DirectorName')),
                ('urastic_name', models.CharField(max_length=100, verbose_name='UrasticName')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('urastic_address', models.CharField(blank=True, max_length=250, null=True, verbose_name='UrasticAddress')),
                ('inn_kpp', models.CharField(blank=True, max_length=121, null=True, verbose_name='INN\\KPP')),
                ('bank_name', models.CharField(max_length=100, verbose_name='BankName')),
                ('account', models.CharField(max_length=35, verbose_name='Account')),
                ('corr_account', models.CharField(max_length=35, verbose_name='CorrAccount')),
                ('bank_bink', models.CharField(max_length=15, verbose_name='BankBink')),
                ('merge_id', models.CharField(blank=True, max_length=4, null=True, verbose_name='MergeID')),
            ],
            options={
                'db_table': 'entity',
            },
        ),
        migrations.CreateModel(
            name='ExcludedVenddoc',
            fields=[
                ('ku_id', models.CharField()),
                ('doc_id', models.CharField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'excluded_vend_doc',
            },
        ),
        migrations.CreateModel(
            name='Ku',
            fields=[
                ('ku_id', models.CharField(editable=False, primary_key=True, serialize=False, verbose_name='ku_id')),
                ('period', models.CharField(max_length=10, verbose_name='Period')),
                ('date_start', models.DateField(verbose_name='Date_start')),
                ('date_end', models.DateField(blank=True, null=True, verbose_name='Date_end')),
                ('status', models.CharField(max_length=20, verbose_name='Status')),
                ('date_actual', models.DateField(blank=True, null=True, verbose_name='Date_actual')),
                ('base', models.FloatField(blank=True, null=True, verbose_name='Base')),
                ('percent', models.IntegerField(blank=True, null=True, verbose_name='Percent')),
                ('graph_exists', models.BooleanField(blank=True, null=True, verbose_name='graph_Exists')),
                ('description', models.CharField(blank=True, null=True, verbose_name='Описание')),
                ('contract', models.CharField(blank=True, null=True, verbose_name='Контракт')),
                ('product_type', models.CharField(blank=True, null=True, verbose_name='Тип продукта')),
                ('docu_account', models.CharField(blank=True, null=True, verbose_name='Номер счета в договоре')),
                ('docu_name', models.CharField(blank=True, null=True, verbose_name='Название договора')),
                ('docu_number', models.CharField(blank=True, null=True, verbose_name='Номер договора')),
                ('docu_date', models.DateField(blank=True, null=True, verbose_name='Дата договора')),
                ('docu_subject', models.CharField(blank=True, null=True, verbose_name='Предмет договора')),
                ('tax', models.BooleanField(blank=True, null=True, verbose_name='Налог')),
                ('exclude_return', models.BooleanField(blank=True, null=True, verbose_name='Исключать возвраты')),
                ('negative_turnover', models.BooleanField(blank=True, null=True, verbose_name='Отрицательный товарооборот')),
                ('ku_type', models.CharField(choices=[('RetroBonus', 'Ретро-бонус'), ('Service', 'Услуга')], default='RetroBonus', verbose_name='Тип КУ')),
                ('pay_method', models.CharField(choices=[('Mutual', 'Взаиморасчет'), ('Payment', 'Оплата')], default='Mutual', verbose_name='Способ оплаты')),
                ('entity_id', models.ForeignKey(db_column='entity_id', db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.entity')),
            ],
            options={
                'db_table': 'ku',
            },
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('group', models.CharField(blank=True, null=True)),
                ('description', models.CharField(blank=True, null=True)),
                ('ku_id', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'manager',
            },
        ),
        migrations.CreateModel(
            name='Official',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('counterparty_name', models.CharField(blank=True, null=True)),
                ('counterparty_post', models.CharField(blank=True, null=True)),
                ('counterparty_docu', models.CharField(blank=True, null=True)),
                ('entity_name', models.CharField(blank=True, null=True)),
                ('entity_post', models.CharField(blank=True, null=True)),
                ('entity_docu', models.CharField(blank=True, null=True)),
                ('ku_id', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'official',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('itemid', models.CharField(primary_key=True, serialize=False, verbose_name='itemId')),
                ('name', models.CharField(blank=True, null=True, verbose_name='Name')),
                ('brand', models.ForeignKey(blank=True, db_column='brand_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.brandclassifier')),
                ('classifier', models.ForeignKey(blank=True, db_column='classifier_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.classifier')),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='Venddoc',
            fields=[
                ('docid', models.CharField(primary_key=True, serialize=False, verbose_name='docid')),
                ('doctype', models.CharField(verbose_name='DocType')),
                ('invoice_name', models.CharField(verbose_name='Invoice_name')),
                ('invoice_number', models.CharField(verbose_name='Invoice_number')),
                ('invoice_date', models.DateField(verbose_name='Invoice_date')),
                ('purch_number', models.CharField(verbose_name='Purch_number')),
                ('purch_date', models.DateField(verbose_name='Purch_date')),
                ('invoice_status', models.CharField(blank=True, null=True, verbose_name='InvoiceStatus')),
                ('invoice_id', models.BigIntegerField(null=True, verbose_name='Invoice_id')),
                ('product_amount', models.FloatField(blank=True, null=True, verbose_name='Products_amount')),
                ('entity_id', models.ForeignKey(db_column='entity_id', db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.entity')),
            ],
            options={
                'db_table': 'vend_doc',
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('vendor_id', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='vendor_id')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name')),
                ('urastic_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='UrasticName')),
                ('inn_kpp', models.CharField(blank=True, max_length=121, null=True, verbose_name='INN/KPP')),
                ('director_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='DirectorName')),
                ('urastic_adress', models.CharField(blank=True, max_length=250, null=True, verbose_name='UrasticAdress')),
                ('account', models.CharField(blank=True, max_length=35, null=True, verbose_name='Account')),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='BankName')),
                ('bank_bik', models.CharField(blank=True, max_length=15, null=True, verbose_name='BankBik')),
                ('corr_account', models.CharField(blank=True, max_length=35, null=True, verbose_name='CorrAccount')),
                ('dir_party', models.BigIntegerField(blank=True, null=True, verbose_name='DirParty')),
                ('entity_id', models.ForeignKey(blank=True, db_column='entity_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.entity')),
            ],
            options={
                'db_table': 'vendor',
            },
        ),
        migrations.CreateModel(
            name='Venddoclines',
            fields=[
                ('recid', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='RecId')),
                ('qty', models.FloatField(verbose_name='QTY')),
                ('amount', models.FloatField(verbose_name='Amount')),
                ('amount_vat', models.FloatField(verbose_name='AmountVAT')),
                ('vat', models.FloatField(verbose_name='VAT')),
                ('invoice_id', models.BigIntegerField(blank=True, null=True, verbose_name='Invoice_id')),
                ('docid', models.ForeignKey(blank=True, db_column='docid', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.venddoc')),
                ('product_id', models.ForeignKey(db_column='product_id', db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.product')),
            ],
            options={
                'db_table': 'vend_doc_lines',
            },
        ),
        migrations.AddField(
            model_name='venddoc',
            name='vendor_id',
            field=models.ForeignKey(db_column='vendor_id', db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.vendor'),
        ),
        migrations.CreateModel(
            name='KuGraph',
            fields=[
                ('graph_id', models.AutoField(primary_key=True, serialize=False, verbose_name='Graph_id')),
                ('period', models.CharField(max_length=10, verbose_name='Period')),
                ('date_start', models.DateField(verbose_name='Date_start')),
                ('date_end', models.DateField(verbose_name='Date_end')),
                ('date_calc', models.DateField(verbose_name='Date_calc')),
                ('status', models.CharField(max_length=20, verbose_name='Status')),
                ('sum_calc', models.FloatField(blank=True, null=True, verbose_name='Sum_calc')),
                ('sum_bonus', models.FloatField(blank=True, null=True, verbose_name='Sum_bonus')),
                ('percent', models.IntegerField(blank=True, null=True, verbose_name='Percent')),
                ('sum_approved', models.FloatField(blank=True, null=True, verbose_name='Sum_approved')),
                ('ku_id', models.ForeignKey(db_column='ku_id', db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.ku')),
                ('vendor_id', models.ForeignKey(db_column='vendor_id', db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.vendor')),
            ],
            options={
                'db_table': 'ku_graph',
            },
        ),
        migrations.AddField(
            model_name='ku',
            name='vendor_id',
            field=models.ForeignKey(db_column='vendor_id', db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.vendor'),
        ),
        migrations.CreateModel(
            name='IncludedProductList',
            fields=[
                ('graph_id', models.BigIntegerField(blank=True, null=True, verbose_name='Graph_id')),
                ('amount', models.FloatField(blank=True, null=True, verbose_name='Amount')),
                ('invoice_id', models.CharField(blank=True, null=True, verbose_name='Invoice_id')),
                ('inc_prod_list', models.BigAutoField(db_column='inc_prod_list', primary_key=True, serialize=False)),
                ('product_id', models.ForeignKey(blank=True, db_column='product_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.product')),
                ('rec_id', models.ForeignKey(blank=True, db_column='rec_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.venddoclines')),
            ],
            options={
                'db_table': 'included_product_list',
            },
        ),
        migrations.CreateModel(
            name='IncludedProduct',
            fields=[
                ('item_type', models.CharField(blank=True, null=True, verbose_name='Item_type')),
                ('item_code', models.CharField(blank=True, null=True, verbose_name='Item_code')),
                ('item_name', models.CharField(blank=True, null=True, verbose_name='Item_name')),
                ('in_prod_id', models.BigAutoField(db_column='in_prod_id', primary_key=True, serialize=False)),
                ('brand', models.CharField(blank=True, null=True, verbose_name='Brand')),
                ('producer', models.CharField(blank=True, null=True, verbose_name='Producer')),
                ('ku_id', models.ForeignKey(blank=True, db_column='ku_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.ku')),
            ],
            options={
                'db_table': 'included_product',
            },
        ),
        migrations.CreateModel(
            name='ExcludedProductList',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('graph_id', models.BigIntegerField(blank=True, db_column='Graph_id', null=True)),
                ('amount', models.FloatField(blank=True, db_column='Amount', null=True)),
                ('invoice_id', models.CharField(blank=True, db_column='Invoice_id', null=True)),
                ('product_id', models.ForeignKey(blank=True, db_column='product_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.product')),
                ('rec_id', models.ForeignKey(blank=True, db_column='rec_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.venddoclines')),
            ],
            options={
                'db_table': 'excluded_product_list',
            },
        ),
        migrations.CreateModel(
            name='ExcludedProduct',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('item_type', models.CharField(blank=True, null=True, verbose_name='Item_type')),
                ('item_code', models.CharField(blank=True, null=True, verbose_name='Item_code')),
                ('item_name', models.CharField(blank=True, null=True, verbose_name='Item_name')),
                ('brand', models.CharField(blank=True, null=True, verbose_name='Brand')),
                ('producer', models.CharField(blank=True, null=True, verbose_name='Producer')),
                ('ku_id', models.ForeignKey(blank=True, db_column='ku_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='LAMA_ucup.ku')),
            ],
            options={
                'db_table': 'excluded_product',
            },
        ),
    ]
